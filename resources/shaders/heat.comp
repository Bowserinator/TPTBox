#version 430

// Multiplication of local sizes <= 1024
layout (local_size_x = 10, local_size_y = 10, local_size_z = 10) in;

layout(std430, binding = 0) readonly restrict buffer HeatInput {
    float heatIn[];
};
layout(std430, binding = 1) writeonly restrict buffer HeatOutput {
    float heatOut[];
};
layout(std430, binding = 2) readonly restrict buffer Constants {
    ivec4 SIMRES;
    ivec4 COMPUTE_BLOCKS;
    uint HEAT_BLOCK_SIZE;
    uint DIRTY_INDEX_COUNT;
    uint DIRTY_INDICES[];
};
layout(std430, binding = 3) writeonly restrict buffer DirtyOut {
    uint dirtyOut[];
};


uint idx(uint x, uint y, uint z) {
    return x + y * SIMRES.x + z * SIMRES.y * SIMRES.x;
}

void markDirty(uint idx) {
    // This is slow on some graphics cards:
    // uint mask = (1 << (8 * (idx & 3))); // 1 at byte idx % 4
    // atomicOr(dirtyOut[idx / 4], mask);
    dirtyOut[idx] = 1;
}

void main() {
    uint id = DIRTY_INDICES[gl_WorkGroupID.x];

    uint z = id / (COMPUTE_BLOCKS.x * COMPUTE_BLOCKS.y);
    id -= z * (COMPUTE_BLOCKS.x * COMPUTE_BLOCKS.y);
    uint y = id / COMPUTE_BLOCKS.x;
    id -= y * COMPUTE_BLOCKS.x;
    uint x = id;

    uvec3 coords = ivec3(x, y, z) * gl_WorkGroupSize + gl_LocalInvocationID;

    if (clamp(coords, uvec3(1), SIMRES.xyz - uvec3(2)) != coords)
        return;

    uint baseIdx = idx(coords.x, coords.y, coords.z);
    float selfTemp = heatIn[baseIdx];
    if (selfTemp < 0.0) {
        heatOut[baseIdx] = -1.0;
        if (heatIn[baseIdx] != -1.0)
            markDirty(COMPUTE_BLOCKS.y * coords.z + coords.y / HEAT_BLOCK_SIZE);
        return;
    }

    float total = selfTemp;
    int count = 1;
    float tmp;
    tmp = heatIn[baseIdx - 1];                   if (tmp >= 0.0f) { count++; total += tmp; } // +- x
    tmp = heatIn[baseIdx + 1];                   if (tmp >= 0.0f) { count++; total += tmp; }
    tmp = heatIn[baseIdx - SIMRES.x];            if (tmp >= 0.0f) { count++; total += tmp; } // +- y 
    tmp = heatIn[baseIdx + SIMRES.x];            if (tmp >= 0.0f) { count++; total += tmp; }
    tmp = heatIn[baseIdx + SIMRES.x * SIMRES.y]; if (tmp >= 0.0f) { count++; total += tmp; } // +- z
    tmp = heatIn[baseIdx - SIMRES.x * SIMRES.y]; if (tmp >= 0.0f) { count++; total += tmp; }
    tmp = total / float(count);

    if (heatIn[baseIdx] != tmp)
        markDirty(COMPUTE_BLOCKS.y * coords.z + coords.y / HEAT_BLOCK_SIZE);
    heatOut[baseIdx] = tmp;
}